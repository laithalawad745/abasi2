// components/RiskGame/RiskGame.jsx - ุฅุถุงูุฉ ุงูุฏูู ุงูุฌุฏูุฏุฉ ููุท ููุฃุชุตุงูุงุช
'use client';

import React, { useState, useEffect } from 'react';
import { getRandomRiskQuestion } from '../../app/data/riskGameData';

// Import components
import PlayerSetup from './PlayerSetup';
import SpinWheel from './SpinWheel';
import WorldMapD3 from './WorldMapD3';
import GameUI from './GameUI';
import QuestionModal from './QuestionModal';

export default function RiskGame() {
  // ุญุงูุฉ ุงููุนุจุฉ ุงูุฃุณุงุณูุฉ
  const [gamePhase, setGamePhase] = useState('setup');
  const [players, setPlayers] = useState([]);
  const [currentPlayerIndex, setCurrentPlayerIndex] = useState(0);
  const [turnOrder, setTurnOrder] = useState([]);
  const [round, setRound] = useState(1);
  
  // ุญุงูุฉ ุงูุฎุฑูุทุฉ ูุงูุฏูู
  const [countries, setCountries] = useState({});
  const [currentQuestion, setCurrentQuestion] = useState(null);
  
  // ุญุงูุฉ ุงูุนูููุงุช
  const [actionType, setActionType] = useState(null);
  const [selectedCountry, setSelectedCountry] = useState(null);
  const [targetCountry, setTargetCountry] = useState(null);
  
  // ๐ ุญุงูุฉ ุงุฎุชูุงุฑ ูุณุชูู ุงูุณุคุงู
  const [showDifficultyModal, setShowDifficultyModal] = useState(false);
  const [pendingAction, setPendingAction] = useState(null); // {type: 'occupy'|'reinforce'|'attack', data: {...}}

  // ุฃููุงู ุงููุงุนุจูู (ุซุงุจุชุฉ ููุชุทุงุจูุฉ ูุน WorldMapD3)
  const playerColors = [
    '#ff4444', // ุฃุญูุฑ - ูุงุนุจ 0
    '#4444ff', // ุฃุฒุฑู - ูุงุนุจ 1  
    '#44ff44', // ุฃุฎุถุฑ - ูุงุนุจ 2
    '#ffff44', // ุฃุตูุฑ - ูุงุนุจ 3
    '#ff44ff', // ุจููุณุฌู - ูุงุนุจ 4
    '#44ffff', // ุณูุงูู - ูุงุนุจ 5
    '#ff8844', // ุจุฑุชูุงูู - ูุงุนุจ 6
    '#8844ff'  // ุจููุณุฌู ุบุงูู - ูุงุนุจ 7
  ];

  // ๐ ุฎุฑูุทุฉ ุงูุฏูู ุงููุฌุงูุฑุฉ - ูุน ุฅุถุงูุฉ ุงูุฏูู ุงูุฌุฏูุฏุฉ
  const adjacentCountries = {
    // ุงูุฏูู ุงูุฃุตููุฉ
    egypt: ['libya', 'algeria'],
    libya: ['egypt', 'algeria', 'france'],
    algeria: ['egypt', 'libya', 'france', 'spain'],
    france: ['libya', 'algeria', 'spain', 'germany', 'united_kingdom'],
    germany: ['france', 'poland', 'ukraine'],
    spain: ['algeria', 'france'],
    italy: ['france', 'germany'],
    united_kingdom: ['france'],
    poland: ['germany', 'ukraine', 'russia'],
    ukraine: ['germany', 'poland', 'russia', 'turkey'],
    turkey: ['ukraine', 'iran', 'saudi_arabia'],
    iran: ['turkey', 'pakistan', 'saudi_arabia'],
    saudi_arabia: ['turkey', 'iran', 'pakistan'],
    pakistan: ['iran', 'saudi_arabia', 'india', 'china'],
    india: ['pakistan', 'china', 'thailand'],
    china: ['pakistan', 'india', 'thailand', 'mongolia', 'russia'],
    mongolia: ['china', 'russia'],
    russia: ['poland', 'ukraine', 'mongolia', 'china', 'kazakhstan'],
    kazakhstan: ['russia'],
    thailand: ['india', 'china', 'vietnam', 'indonesia'],
    vietnam: ['thailand', 'china'],
    indonesia: ['thailand', 'australia'],
    australia: ['indonesia'],
    brazil: ['argentina', 'usa'],
    argentina: ['brazil'],
    usa: ['brazil', 'canada', 'mexico'],
    canada: ['usa'],
    mexico: ['usa'],
    south_africa: ['nigeria'],
    nigeria: ['south_africa'],
    japan: ['china', 'south_korea'],
    south_korea: ['japan', 'china'],
    
    // ๐ ุงูุฏูู ุงูุฌุฏูุฏุฉ ูุน ุงุชุตุงูุงุชูุง
    // ุฃูุฑูุจุง ุงูุดูุงููุฉ
    norway: ['sweden', 'finland', 'united_kingdom'],
    sweden: ['norway', 'finland', 'denmark'],
    finland: ['norway', 'sweden', 'russia'],
    denmark: ['sweden', 'germany', 'netherlands'],
    netherlands: ['germany', 'belgium', 'denmark'],
    belgium: ['netherlands', 'germany', 'france'],
    switzerland: ['france', 'germany', 'austria', 'italy'],
    austria: ['germany', 'czech_republic', 'switzerland', 'italy'],
    czech_republic: ['germany', 'poland', 'austria'],
    romania: ['ukraine', 'bulgaria'],
    bulgaria: ['romania', 'turkey', 'greece'],
    greece: ['bulgaria', 'turkey', 'italy'],
    portugal: ['spain'],
    
    // ุขุณูุง ุงูุฌุฏูุฏุฉ
    myanmar: ['china', 'india', 'bangladesh', 'thailand', 'laos'],
    malaysia: ['thailand', 'indonesia'],
    philippines: ['malaysia'],
    north_korea: ['china', 'russia', 'south_korea'],
    afghanistan: ['iran', 'pakistan', 'china', 'uzbekistan', 'kazakhstan'],
    uzbekistan: ['afghanistan', 'kazakhstan'],
    bangladesh: ['india', 'myanmar'],
    sri_lanka: ['india'],
    nepal: ['india', 'china'],
    bhutan: ['india', 'china'],
    laos: ['china', 'vietnam', 'thailand', 'myanmar'],
    cambodia: ['thailand', 'vietnam'],
    
    // ุฃูุฑูููุง ุงูุฌุฏูุฏุฉ
    morocco: ['algeria', 'spain', 'portugal'],
    tunisia: ['libya', 'algeria'],
    sudan: ['egypt', 'libya', 'ethiopia'],
    ethiopia: ['sudan', 'kenya'],
    kenya: ['ethiopia', 'tanzania'],
    tanzania: ['kenya', 'zambia', 'zimbabwe'],
    zambia: ['tanzania', 'zimbabwe', 'botswana', 'angola', 'democratic_republic_congo'],
    zimbabwe: ['zambia', 'tanzania', 'botswana', 'south_africa'],
    botswana: ['zambia', 'zimbabwe', 'south_africa', 'namibia'],
    namibia: ['botswana', 'south_africa', 'angola'],
    madagascar: [],
    ghana: ['nigeria', 'ivory_coast'],
    ivory_coast: ['ghana', 'nigeria'],
    cameroon: ['nigeria', 'democratic_republic_congo'],
    democratic_republic_congo: ['cameroon', 'zambia', 'angola'],
    angola: ['democratic_republic_congo', 'zambia', 'namibia'],
    
    // ุงูุฃูุฑููุชูู ุงูุฌุฏูุฏุฉ
    chile: ['argentina', 'peru', 'bolivia'],
    peru: ['chile', 'bolivia', 'brazil', 'colombia', 'ecuador'],
    colombia: ['venezuela', 'brazil', 'peru', 'ecuador', 'panama'],
    venezuela: ['colombia', 'brazil'],
    bolivia: ['brazil', 'argentina', 'chile', 'peru'],
    ecuador: ['peru', 'colombia'],
    uruguay: ['brazil', 'argentina'],
    guatemala: ['mexico', 'panama'],
    cuba: [],
    panama: ['colombia', 'costa_rica', 'guatemala'],
    costa_rica: ['panama', 'nicaragua'],
    nicaragua: ['costa_rica'],
    
    // ุฃูููุงููุณูุง ุงูุฌุฏูุฏุฉ
    new_zealand: ['australia'],
    papua_new_guinea: ['indonesia', 'australia'],
    fiji: [],
    
    // ุงูุดุฑู ุงูุฃูุณุท ุงูุฌุฏูุฏ
    israel: ['syria', 'jordan', 'egypt', 'lebanon'],
    lebanon: ['syria', 'israel'],
    syria: ['turkey', 'iraq', 'jordan', 'lebanon', 'israel'],
    jordan: ['syria', 'iraq', 'saudi_arabia', 'israel'],
    iraq: ['iran', 'turkey', 'syria', 'jordan', 'saudi_arabia', 'kuwait'],
    yemen: ['saudi_arabia', 'oman'],
    oman: ['yemen', 'saudi_arabia', 'uae'],
    uae: ['oman', 'saudi_arabia', 'qatar'],
    kuwait: ['iraq', 'saudi_arabia'],
    qatar: ['saudi_arabia', 'uae']
  };

  // ุงููุงุนุจ ุงูุญุงูู
  const currentPlayer = players[turnOrder[currentPlayerIndex]];

  // ุชููุฆุฉ ุงูุฏูู ุนูุฏ ุจุฏุงูุฉ ุงููุนุจุฉ
  useEffect(() => {
    if (gamePhase === 'playing' && Object.keys(countries).length === 0) {
      initializeCountries();
    }
  }, [gamePhase]);

  // ุชููุฆุฉ ุงูุฏูู
  const initializeCountries = () => {
    const countryNames = {
      // ุงูุฏูู ุงูุฃุตููุฉ
      egypt: 'ูุตุฑ', libya: 'ููุจูุง', algeria: 'ุงูุฌุฒุงุฆุฑ', france: 'ูุฑูุณุง',
      germany: 'ุฃููุงููุง', spain: 'ุฅุณุจุงููุง', italy: 'ุฅูุทุงููุง',
      united_kingdom: 'ุงูููููุฉ ุงููุชุญุฏุฉ', poland: 'ุจูููุฏุง', ukraine: 'ุฃููุฑุงููุง',
      turkey: 'ุชุฑููุง', iran: 'ุฅูุฑุงู', saudi_arabia: 'ุงูุณุนูุฏูุฉ',
      pakistan: 'ุจุงูุณุชุงู', india: 'ุงูููุฏ', china: 'ุงูุตูู',
      mongolia: 'ููุบูููุง', russia: 'ุฑูุณูุง', kazakhstan: 'ูุงุฒุงุฎุณุชุงู',
      thailand: 'ุชุงููุงูุฏ', vietnam: 'ููุชูุงู', indonesia: 'ุฅูุฏูููุณูุง',
      australia: 'ุฃุณุชุฑุงููุง', brazil: 'ุงูุจุฑุงุฒูู', argentina: 'ุงูุฃุฑุฌูุชูู',
      usa: 'ุงูููุงูุงุช ุงููุชุญุฏุฉ', canada: 'ููุฏุง', mexico: 'ุงูููุณูู',
      south_africa: 'ุฌููุจ ุฃูุฑูููุง', nigeria: 'ููุฌูุฑูุง', japan: 'ุงููุงุจุงู',
      south_korea: 'ููุฑูุง ุงูุฌููุจูุฉ',
      
      // ๐ ุงูุฏูู ุงูุฌุฏูุฏุฉ
      // ุฃูุฑูุจุง ุงูุดูุงููุฉ ูุงููุณุทู
      norway: 'ุงููุฑููุฌ', sweden: 'ุงูุณููุฏ', finland: 'ููููุฏุง', denmark: 'ุงูุฏููุงุฑู',
      netherlands: 'ููููุฏุง', belgium: 'ุจูุฌููุง', switzerland: 'ุณููุณุฑุง',
      austria: 'ุงูููุณุง', czech_republic: 'ุงูุชุดูู', romania: 'ุฑููุงููุง',
      bulgaria: 'ุจูุบุงุฑูุง', greece: 'ุงููููุงู', portugal: 'ุงูุจุฑุชุบุงู',
      
      // ุขุณูุง ุงูุฌุฏูุฏุฉ
      myanmar: 'ููุงููุงุฑ', malaysia: 'ูุงููุฒูุง', philippines: 'ุงูููุจูู',
      north_korea: 'ููุฑูุง ุงูุดูุงููุฉ', afghanistan: 'ุฃูุบุงูุณุชุงู', uzbekistan: 'ุฃูุฒุจูุณุชุงู',
      bangladesh: 'ุจูุบูุงุฏุด', sri_lanka: 'ุณุฑููุงููุง', nepal: 'ููุจุงู',
      bhutan: 'ุจูุชุงู', laos: 'ูุงูุณ', cambodia: 'ููุจูุฏูุง',
      
      // ุฃูุฑูููุง ุงูุฌุฏูุฏุฉ
      morocco: 'ุงููุบุฑุจ', tunisia: 'ุชููุณ', sudan: 'ุงูุณูุฏุงู',
      ethiopia: 'ุฅุซููุจูุง', kenya: 'ููููุง', tanzania: 'ุชูุฒุงููุง',
      zambia: 'ุฒุงูุจูุง', zimbabwe: 'ุฒููุจุงุจูู', botswana: 'ุจูุชุณูุงูุง',
      namibia: 'ูุงููุจูุง', madagascar: 'ูุฏุบุดูุฑ', ghana: 'ุบุงูุง',
      ivory_coast: 'ุณุงุญู ุงูุนุงุฌ', cameroon: 'ุงููุงููุฑูู',
      democratic_republic_congo: 'ุงููููุบู ุงูุฏูููุฑุงุทูุฉ', angola: 'ุฃูุบููุง',
      
      // ุงูุฃูุฑููุชูู ุงูุฌุฏูุฏุฉ
      chile: 'ุชุดููู', peru: 'ุจูุฑู', colombia: 'ูููููุจูุง',
      venezuela: 'ููุฒูููุง', bolivia: 'ุจูููููุง', ecuador: 'ุงูุฅููุงุฏูุฑ',
      uruguay: 'ุฃูุฑูุบูุงู', guatemala: 'ุบูุงุชููุงูุง', cuba: 'ููุจุง',
      panama: 'ุจููุง', costa_rica: 'ููุณุชุงุฑููุง', nicaragua: 'ูููุงุฑุงุบูุง',
      
      // ุฃูููุงููุณูุง ุงูุฌุฏูุฏุฉ
      new_zealand: 'ูููุฒูููุฏุง', papua_new_guinea: 'ุจุงุจูุง ููู ุบูููุง', fiji: 'ููุฌู',
      
      // ุงูุดุฑู ุงูุฃูุณุท ุงูุฌุฏูุฏ
      israel: 'ุฅุณุฑุงุฆูู', lebanon: 'ูุจูุงู', syria: 'ุณูุฑูุง', jordan: 'ุงูุฃุฑุฏู',
      iraq: 'ุงูุนุฑุงู', yemen: 'ุงูููู', oman: 'ุนูุงู', uae: 'ุงูุฅูุงุฑุงุช',
      kuwait: 'ุงููููุช', qatar: 'ูุทุฑ'
    };
    
    const initialCountries = {};
    Object.keys(countryNames).forEach(countryId => {
      initialCountries[countryId] = {
        id: countryId,
        name: countryNames[countryId],
        owner: null,
        troops: 1
      };
    });
    setCountries(initialCountries);
  };

  // ๐ ูููู ุงุฎุชูุงุฑ ูุณุชูู ุงูุณุคุงู
  const DifficultySelectionModal = () => {
    if (!showDifficultyModal || !pendingAction) return null;

    const handleDifficultySelect = (difficulty) => {
      setShowDifficultyModal(false);
      
      // ุชูููุฐ ุงูุฅุฌุฑุงุก ุงููุคุฌู ูุน ุงููุณุชูู ุงููุฎุชุงุฑ
      if (pendingAction.type === 'occupy') {
        executeOccupyCountry(pendingAction.data.countryId, pendingAction.data.player, difficulty);
      } else if (pendingAction.type === 'reinforce') {
        executeReinforceCountry(pendingAction.data.countryId, difficulty);
      } else if (pendingAction.type === 'attack') {
        executeAttackCountry(pendingAction.data.targetCountryId, pendingAction.data.attackingCountryId, difficulty);
      }
      
      setPendingAction(null);
    };

    const difficulties = [
      { 
        key: 'easy', 
        name: 'ุณูู', 
        troops: 5, 
        color: 'from-green-500 to-emerald-500', 
        description: 'ูุฑุตุฉ ูุฌุงุญ ุนุงููุฉ - ูุฎุงุทุฑุฉ ููุฎูุถุฉ' 
      },
      { 
        key: 'medium', 
        name: 'ูุชูุณุท', 
        troops: 10, 
        color: 'from-yellow-500 to-orange-500', 
        description: 'ูุฑุตุฉ ูุฌุงุญ ูุชูุณุทุฉ - ูุฎุงุทุฑุฉ ูุชูุงุฒูุฉ' 
      },
      { 
        key: 'hard', 
        name: 'ุตุนุจ', 
        troops: 20, 
        color: 'from-red-500 to-pink-500', 
        description: 'ูุฑุตุฉ ูุฌุงุญ ููุฎูุถุฉ - ูุฎุงุทุฑุฉ ุนุงููุฉ' 
      }
    ];

    return (
      <div className="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50">
        <div className="bg-slate-800 rounded-2xl p-8 max-w-md w-full mx-4 border border-slate-600">
          <h2 className="text-2xl font-bold text-white text-center mb-6">
             ุงุฎุชุฑ ูุณุชูู ุงูุณุคุงู
          </h2>
          
          <div className="space-y-4">
            {difficulties.map(diff => (
              <button
                key={diff.key}
                onClick={() => handleDifficultySelect(diff.key)}
                className={`w-full p-4 rounded-xl bg-gradient-to-r ${diff.color} hover:scale-105 transition-all duration-300 shadow-lg`}
              >
                <div className="text-white">
                  <div className="text-xl font-bold">{diff.name}</div>
                  <div className="text-lg font-bold">  {diff.troops} ุฌูุฏู</div>
                </div>
              </button>
            ))}
          </div>

          <button
            onClick={() => {
              setShowDifficultyModal(false);
              setPendingAction(null);
              setActionType(null);
              setSelectedCountry(null);
              setTargetCountry(null);
            }}
            className="w-full mt-4 bg-gray-600 hover:bg-gray-700 text-white py-3 rounded-xl font-bold transition-colors"
          >
            โ ุฅูุบุงุก
          </button>
        </div>
      </div>
    );
  };

  // ุฅุนุฏุงุฏ ุงููุงุนุจูู
  const setupPlayers = (playerCount) => {
    const newPlayers = Array(playerCount).fill(null).map((_, i) => ({
      id: i,
      name: `ูุงุนุจ ${i + 1}`,
      color: playerColors[i],
      countries: [],
      totalTroops: 0,
      eliminated: false,
      isActive: true
    }));
    setPlayers(newPlayers);
    setGamePhase('spin');
    
    // ุชูุธูู ุญุงูุฉ ุณุงุจูุฉ
    setCurrentPlayerIndex(0);
    setTurnOrder([]);
    setCountries({});
    setCurrentQuestion(null);
    setActionType(null);
    setSelectedCountry(null);
    setTargetCountry(null);
  };

  // ุนุฌูุฉ ุงูุญุธ ูุชุญุฏูุฏ ุชุฑุชูุจ ุงููุนุจ
  const spinForTurnOrder = (result) => {
    const shuffledPlayers = [...players].sort(() => Math.random() - 0.5);
    const newTurnOrder = shuffledPlayers.map(p => p.id);
    
    setTurnOrder(newTurnOrder);
    setCurrentPlayerIndex(0);
    setGamePhase('playing');
  };

  // ุนุฑุถ ุงูุณุคุงู ูุน callback ูููุฌุงุญ ูุงููุดู
  const showRiskQuestion = (difficulty, onSuccess, onFailure) => {
    const question = getRandomRiskQuestion();
    setCurrentQuestion({
      ...question,
      difficulty: difficulty,
      onSuccess: () => {
        setCurrentQuestion(null);
        onSuccess(difficulty);
      },
      onFailure: () => {
        setCurrentQuestion(null);
        onFailure();
      }
    });
  };

  // ุงูุฅุฌุงุจุฉ ุนูู ุงูุณุคุงู
  const answerQuestion = (isCorrect) => {
    if (currentQuestion) {
      if (isCorrect) {
        currentQuestion.onSuccess();
      } else {
        currentQuestion.onFailure();
      }
    }
  };

  // ุงูุญุตูู ุนูู ุนุฏุฏ ุงูุฌููุฏ ุญุณุจ ุงููุณุชูู
  const getTroopsForDifficulty = (difficulty) => {
    switch(difficulty) {
      case 'easy': return 5;
      case 'medium': return 10;
      case 'hard': return 20;
      default: return 5;
    }
  };

  // ๐ ุงุญุชูุงู ุฏููุฉ ูุงุฑุบุฉ - ุนุฑุถ ุงุฎุชูุงุฑ ุงููุณุชูู
  const occupyCountry = (countryId, player) => {
    setActionType('occupy');
    setSelectedCountry(countryId);
    
    // ุฅุธูุงุฑ modal ุงุฎุชูุงุฑ ุงููุณุชูู
    setPendingAction({
      type: 'occupy',
      data: { countryId, player }
    });
    setShowDifficultyModal(true);
  };

  // ๐ ุชูููุฐ ุงุญุชูุงู ุงูุฏููุฉ ุจุงููุณุชูู ุงููุฎุชุงุฑ
  const executeOccupyCountry = (countryId, player, difficulty) => {
    console.log(`๐ด ${player.name} (ID: ${player.id}) ูุญุงูู ุงุญุชูุงู ${countries[countryId].name} - ูุณุชูู ${difficulty}`);
    
    showRiskQuestion(difficulty, (selectedDifficulty) => {
      const troopsGained = getTroopsForDifficulty(selectedDifficulty);
      
      console.log(`โ ูุฌุญ ูู ุงูุงุญุชูุงู! ุงููุงุนุจ ${player.id} ุณูููู ${countryId} ุจู ${troopsGained} ุฌูุฏู`);
      
      // ุชุญุฏูุซ ุงูุฏูู
      setCountries(prevCountries => {
        const newCountries = { ...prevCountries };
        newCountries[countryId] = {
          ...newCountries[countryId],
          owner: player.id,
          troops: troopsGained
        };
        
        console.log(`๐ ุชุญุฏูุซ ุงูุฏููุฉ ${countryId}: ูุงูู = ${player.id}, ุฌููุฏ = ${troopsGained}`);
        
        return newCountries;
      });
      
      // ุชุญุฏูุซ ูุงุฆูุฉ ุฏูู ุงููุงุนุจ
      setPlayers(prevPlayers => {
        const newPlayers = [...prevPlayers];
        const playerIndex = newPlayers.findIndex(p => p.id === player.id);
        
        if (playerIndex !== -1) {
          if (!newPlayers[playerIndex].countries.includes(countryId)) {
            newPlayers[playerIndex].countries.push(countryId);
          }
          newPlayers[playerIndex].totalTroops += troopsGained;
          
          console.log(`๐ค ุชุญุฏูุซ ุงููุงุนุจ ${player.name}: ุฏูู = ${newPlayers[playerIndex].countries.length}`);
        }
        
        return newPlayers;
      });
      
      setTimeout(() => {
        nextTurn();
      }, 1000);
      
    }, () => {
      alert('โ ูุดู ูู ุงุญุชูุงู ุงูุฏููุฉ!');
      setTimeout(() => {
        nextTurn();
      }, 1000);
    });
  };

  // ๐ ุชูููุฉ ุฏููุฉ - ุนุฑุถ ุงุฎุชูุงุฑ ุงููุณุชูู
  const reinforceCountry = (countryId) => {
    setActionType('reinforce');
    setSelectedCountry(countryId);
    
    // ุฅุธูุงุฑ modal ุงุฎุชูุงุฑ ุงููุณุชูู
    setPendingAction({
      type: 'reinforce',
      data: { countryId }
    });
    setShowDifficultyModal(true);
  };

  // ๐ ุชูููุฐ ุชูููุฉ ุงูุฏููุฉ ุจุงููุณุชูู ุงููุฎุชุงุฑ
  const executeReinforceCountry = (countryId, difficulty) => {
    console.log(`๐ช ${currentPlayer.name} ูุญุงูู ุชูููุฉ ${countries[countryId].name} - ูุณุชูู ${difficulty}`);
    
    showRiskQuestion(difficulty, (selectedDifficulty) => {
      const troopsGained = getTroopsForDifficulty(selectedDifficulty);
      
      setCountries(prevCountries => {
        const newCountries = { ...prevCountries };
        newCountries[countryId] = {
          ...newCountries[countryId],
          troops: newCountries[countryId].troops + troopsGained
        };
        return newCountries;
      });
      
      setPlayers(prevPlayers => {
        const newPlayers = [...prevPlayers];
        const playerIndex = newPlayers.findIndex(p => p.id === currentPlayer.id);
        if (playerIndex !== -1) {
          newPlayers[playerIndex].totalTroops += troopsGained;
        }
        return newPlayers;
      });
      
      alert(`๐ช ุชูุช ุชูููุฉ ${countries[countryId].name} ุจู ${troopsGained} ุฌูุฏู ุฅุถุงูู!`);
      setTimeout(() => {
        nextTurn();
      }, 1000);
    }, () => {
      // ูุดูุช ุงูุชูููุฉ - ุฎุณุงุฑุฉ 50%
      setCountries(prevCountries => {
        const newCountries = { ...prevCountries };
        const currentTroops = newCountries[countryId].troops;
        const troopsLost = Math.floor(currentTroops * 0.5);
        const newTroops = Math.max(1, currentTroops - troopsLost);
        newCountries[countryId].troops = newTroops;
        return newCountries;
      });
      
      setPlayers(prevPlayers => {
        const newPlayers = [...prevPlayers];
        const playerIndex = newPlayers.findIndex(p => p.id === currentPlayer.id);
        if (playerIndex !== -1) {
          const troopsLost = Math.floor(countries[countryId].troops * 0.5);
          newPlayers[playerIndex].totalTroops -= troopsLost;
        }
        return newPlayers;
      });
      
      alert(`๐ ุฎุณุฑุช 50% ูู ุฌูุด ${countries[countryId].name}`);
      
      setTimeout(() => {
        checkImmediateElimination();
        nextTurn();
      }, 1000);
    });
  };

  // ๐ ููุงุฌูุฉ ุฏููุฉ - ูุน ููุทู ุงูููุฉ ุงููุญุณู (ูุงููู ุงูููุฉ ุงูุจุณูุท)
  const attackCountry = (targetCountryId) => {
    const attackingCountryId = Object.keys(countries).find(id => 
      countries[id].owner === currentPlayer.id && 
      adjacentCountries[id]?.includes(targetCountryId)
    );
    
    if (!attackingCountryId) {
      alert('ูุง ููุฌุฏ ุฏููุฉ ูุฌุงูุฑุฉ ูููุฌูู ูููุง!');
      return;
    }
    
    // ุงูุชุฃูุฏ ุฃู ูุฏูู ุฌููุฏ ูุงููุฉ ูููุฌูู (ุงูุญุฏ ุงูุฃุฏูู)
    if (countries[attackingCountryId].troops < 2) {
      alert('ุชุญุชุงุฌ ุนูู ุงูุฃูู ุฌูุฏููู ูููุฌูู!');
      return;
    }

    // ๐ ๐ฏ ุงูููุงุฑูุฉ ุงูุนุณูุฑูุฉ - ุงูููุงุฌู ูุฌุจ ุฃู ูููู ุฃููู ุฃู ูุณุงูู ูููุฏุงูุน
    const attackingTroops = countries[attackingCountryId].troops;
    const defendingTroops = countries[targetCountryId].troops;

    if (attackingTroops < defendingTroops) {
      alert(`โ ูุง ููููู ููุงุฌูุฉ ุฏููุฉ ุฃููู ููู!
    
ููุชู ูู ${countries[attackingCountryId].name}: ${attackingTroops} ุฌูุฏู
ููุฉ ุงูุนุฏู ูู ${countries[targetCountryId].name}: ${defendingTroops} ุฌูุฏู

๐ก ูู ุจุชูููุฉ ุฌูุดู ุฃููุงู ูุจู ุงููุฌูู!`);
      return;
    }
    
    setActionType('attack');
    setSelectedCountry(attackingCountryId);
    setTargetCountry(targetCountryId);
    
    // ุฅุธูุงุฑ modal ุงุฎุชูุงุฑ ุงููุณุชูู
    setPendingAction({
      type: 'attack',
      data: { targetCountryId, attackingCountryId }
    });
    setShowDifficultyModal(true);
  };

  // ๐ ุชูููุฐ ุงููุฌูู ุจุงููุณุชูู ุงููุฎุชุงุฑ - ูุน ุงูุชุญุณููุงุช (ููุญุณูู ูุฅุตูุงุญ ูุดููุฉ ุงูุฃููุงู)
  const executeAttackCountry = (targetCountryId, attackingCountryId, difficulty) => {
    const attackingTroops = countries[attackingCountryId].troops;
    const defendingTroops = countries[targetCountryId].troops;
    const powerRatio = (attackingTroops / defendingTroops).toFixed(1);
    
    console.log(`โ๏ธ ${currentPlayer.name} ููุงุฌู ${countries[targetCountryId].name} ูู ${countries[attackingCountryId].name}
ูุณุจุฉ ุงูููุฉ: ${powerRatio}:1 (${attackingTroops} vs ${defendingTroops})
ูุณุชูู ุงูุณุคุงู: ${difficulty}`);
    
    showRiskQuestion(difficulty, () => {
      const previousOwner = countries[targetCountryId].owner;
      
      // ๐ ุชุญุฏูุฏ ููุฉ ุงูุฌูุด ุงูุฌุฏูุฏ ุจูุงุกู ุนูู ูุณุจุฉ ุงูููุฉ ุงูุฃุตููุฉ
      const baseNewTroops = 15;
      const bonusTroops = Math.floor((attackingTroops - defendingTroops) * 0.5); // ููุงูุฃุฉ ููุชููู
      const finalTroops = Math.max(baseNewTroops, baseNewTroops + bonusTroops);
      const attackLosses = Math.ceil(attackingTroops * 0.1); // ุฎุณุงุฑุฉ 10%
      
      console.log(`โ ูุฌุญ ุงููุฌูู!
- ุงูุฌูุด ุงูุฌุฏูุฏ ูู ${countries[targetCountryId].name}: ${finalTroops} ุฌูุฏู
- ุฎุณุงุฆุฑ ุงูููุงุฌู: ${attackLosses} ุฌูุฏู
- ุจุงูู ุงูุฌูุด ูู ${countries[attackingCountryId].name}: ${attackingTroops - attackLosses} ุฌูุฏู`);
      
      // ุชุญุฏูุซ ุงูุฏูู ูุน ุงูุฅุญุตุงุฆูุงุช ุงูุฌุฏูุฏุฉ
      setCountries(prevCountries => {
        const newCountries = { ...prevCountries };
        
        // ุชุญุฏูุซ ุงูุฏููุฉ ุงูููุงุฌูุฉ (ุฎุณุงุฑุฉ ุฌุฒุฆูุฉ)
        newCountries[attackingCountryId] = {
          ...newCountries[attackingCountryId],
          troops: Math.max(1, attackingTroops - attackLosses)
        };
        
        // ุชุญุฏูุซ ุงูุฏููุฉ ุงูููุญุชูุฉ (ูุงูู ุฌุฏูุฏ)
        newCountries[targetCountryId] = {
          ...newCountries[targetCountryId],
          owner: currentPlayer.id,
          troops: finalTroops
        };
        
        console.log('๐ฅ ุชุญุฏูุซ ุฎุฑูุทุฉ ุงูุจูุฏุงู:', {
          [attackingCountryId]: `${newCountries[attackingCountryId].troops} ุฌูุฏู`,
          [targetCountryId]: `ูุงูู ุฌุฏูุฏ ${currentPlayer.id} - ${finalTroops} ุฌูุฏู`
        });
        
        return newCountries;
      });
      
      // ุชุญุฏูุซ ุงููุงุนุจูู
      setPlayers(prevPlayers => {
        const newPlayers = [...prevPlayers];
        
        // ุชุญุฏูุซ ุงูููุงุฌู (ุฅุถุงูุฉ ุงูุฏููุฉ ุงูุฌุฏูุฏุฉ)
        const attackerIndex = newPlayers.findIndex(p => p.id === currentPlayer.id);
        if (attackerIndex !== -1) {
          if (!newPlayers[attackerIndex].countries.includes(targetCountryId)) {
            newPlayers[attackerIndex].countries.push(targetCountryId);
          }
          newPlayers[attackerIndex].totalTroops = newPlayers[attackerIndex].totalTroops - attackLosses + finalTroops;
        }
        
        // ุชุญุฏูุซ ุงููุฏุงูุน (ุฅุฒุงูุฉ ุงูุฏููุฉ)
        if (previousOwner !== null) {
          const defenderIndex = newPlayers.findIndex(p => p.id === previousOwner);
          if (defenderIndex !== -1) {
            newPlayers[defenderIndex].countries = newPlayers[defenderIndex].countries.filter(id => id !== targetCountryId);
            newPlayers[defenderIndex].totalTroops -= defendingTroops;
          }
        }
        
        console.log('๐ฅ ุชุญุฏูุซ ุงููุงุนุจูู:', {
          attacker: `${newPlayers[attackerIndex]?.name}: ${newPlayers[attackerIndex]?.countries.length} ุฏููุฉ`,
          defender: previousOwner !== null ? `ูุงุนุจ ${previousOwner}: ุฎุณุฑ ${countries[targetCountryId].name}` : 'ูุง ููุฌุฏ ูุฏุงูุน'
        });
        
        return newPlayers;
      });
      
      alert(`๐ฏ ูุฌุญ ุงููุฌูู! ุชู ุงุญุชูุงู ${countries[targetCountryId].name} ุจููุฉ ${finalTroops} ุฌูุฏู!
ุฎุณุงุฆุฑู: ${attackLosses} ุฌูุฏู ูู ${countries[attackingCountryId].name}`);
      
      setTimeout(() => {
        checkImmediateElimination();
        nextTurn();
      }, 2000);
      
    }, () => {
      // ูุดู ุงููุฌูู - ุฎุณุงุฑุฉ 50% ูู ุฌูุด ุงูุฏููุฉ ุงููููุงุฌููุฉ
      const currentTroops = countries[attackingCountryId].troops;
      const lostTroops = Math.floor(currentTroops * 0.5);
      const remainingTroops = Math.max(1, currentTroops - lostTroops);
      
      console.log(`๐ฅ ูุดู ุงููุฌูู! ุฎุณุงุฑุฉ ${lostTroops} ูู ${currentTroops} ูู ${countries[attackingCountryId].name}`);
      
      setCountries(prevCountries => {
        const newCountries = { ...prevCountries };
        newCountries[attackingCountryId] = {
          ...newCountries[attackingCountryId],
          troops: remainingTroops
        };
        return newCountries;
      });
      
      setPlayers(prevPlayers => {
        const newPlayers = [...prevPlayers];
        const playerIndex = newPlayers.findIndex(p => p.id === currentPlayer.id);
        if (playerIndex !== -1) {
          newPlayers[playerIndex].totalTroops -= lostTroops;
        }
        return newPlayers;
      });
      
      alert(`๐ฅ ูุดู ุงููุฌูู! ุฎุณุฑุช ${lostTroops} ุฌูุฏู ูู ${countries[attackingCountryId].name}
ุงูุจุงูู: ${remainingTroops} ุฌูุฏู`);
      
      setTimeout(() => {
        checkImmediateElimination();
        nextTurn();
      }, 1000);
    });
  };

  // ุงูุชุญูู ูู ุงูุฅูุตุงุก ุงูููุฑู
  const checkImmediateElimination = () => {
    setPlayers(prevPlayers => {
      const newPlayers = [...prevPlayers];
      const eliminatedThisTurn = [];
      
      newPlayers.forEach(player => {
        if (!player.eliminated) {
          const playerCountries = Object.keys(countries).filter(id => 
            countries[id].owner === player.id
          );
          
          if (playerCountries.length === 0 || player.totalTroops < 5) {
            player.eliminated = true;
            player.isActive = false;
            eliminatedThisTurn.push(player.name);
            console.log(`โ ุชู ุฅูุตุงุก ${player.name} - ุฌูุด ุถุนูู ุฌุฏุงู!`);
            
            // ุชุญุฑูุฑ ุฏููู ูุฌุนููุง ูุญุงูุฏุฉ ุถุนููุฉ
            playerCountries.forEach(country => {
              const countryId = Object.keys(countries).find(id => countries[id] === country);
              if (countryId) {
                setCountries(prev => ({
                  ...prev,
                  [countryId]: { ...prev[countryId], owner: null, troops: 1 }
                }));
              }
            });
          }
        }
      });
      
      if (eliminatedThisTurn.length > 0) {
        const activePlayers = newPlayers.filter(p => !p.eliminated);
        const newTurnOrder = activePlayers.map(p => p.id);
        setTurnOrder(newTurnOrder);
        
        if (newTurnOrder.length > 0) {
          const newIndex = Math.min(currentPlayerIndex, newTurnOrder.length - 1);
          setCurrentPlayerIndex(newIndex);
        }
        
        alert(`๐ฅ ุชู ุฅูุตุงุก: ${eliminatedThisTurn.join(', ')}!`);
      }
      
      return newPlayers;
    });
  };

  // ุงุฎุชูุงุฑ ุฏููุฉ
  const selectCountry = (countryId) => {
    const country = countries[countryId];
    if (!country) {
      console.log('โ ุฏููุฉ ุบูุฑ ูุนุฑููุฉ:', countryId);
      return;
    }

    if (!currentPlayer) {
      console.log('โ ูุง ููุฌุฏ ูุงุนุจ ุญุงูู');
      return;
    }

    console.log(`๐ฏ ุงููุงุนุจ ${currentPlayer.name} (ID: ${currentPlayer.id}) ููุฑ ุนูู ${country.name} (ูุงูู ุญุงูู: ${country.owner})`);
    
    if (country.owner === null) {
      // ุฏููุฉ ูุงุฑุบุฉ - ุงุญุชูุงู
      occupyCountry(countryId, currentPlayer);
    } else if (country.owner === currentPlayer.id) {
      // ุฏููุฉ ูููููุฉ - ุชูููุฉ
      reinforceCountry(countryId);
    } else {
      // ุฏููุฉ ููุนุฏู - ูุฌูู
      const playerCountries = Object.keys(countries).filter(id => 
        countries[id].owner === currentPlayer.id
      );
      
      const canAttack = playerCountries.some(playerCountryId => 
        adjacentCountries[playerCountryId]?.includes(countryId)
      );
      
      if (canAttack) {
        attackCountry(countryId);
      } else {
        alert('ููููู ููุท ููุงุฌูุฉ ุงูุฏูู ุงููุฌุงูุฑุฉ ูุฏููู!');
      }
    }
  };

  // ุงูุงูุชูุงู ููุฏูุฑ ุงูุชุงูู
  const nextTurn = () => {
    setCurrentPlayerIndex((prevIndex) => {
      const activePlayers = players.filter(p => !p.eliminated);
      
      if (activePlayers.length <= 1) {
        // ุงูุชูุงุก ุงููุนุจุฉ
        setGamePhase('finished');
        return prevIndex;
      }
      
      const newIndex = (prevIndex + 1) % turnOrder.length;
      
      // ุฅุฐุง ุนุฏูุง ููุงุนุจ ุงูุฃููุ ุงูุชูู ููุฌููุฉ ุงูุชุงููุฉ
      if (newIndex === 0) {
        setRound(prevRound => prevRound + 1);
      }
      
      return newIndex;
    });
    
    // ุฅุนุงุฏุฉ ุชุนููู ุญุงูุฉ ุงูุนูููุงุช
    setActionType(null);
    setSelectedCountry(null);
    setTargetCountry(null);
  };

  // ุงูุชุญูู ูู ุงูููุฒ
  const checkForWinner = () => {
    const activePlayers = players.filter(p => !p.eliminated);
    if (activePlayers.length === 1) {
      const winner = activePlayers[0];
      alert(`๐ ุงูุชูุช ุงููุนุจุฉ! ุงููุงุฆุฒ ูู ${winner.name}!`);
      setGamePhase('finished');
      return true;
    }
    return false;
  };

  // ุฅููุงุก ุงูุฏูุฑ (ุงูุถุงู ููุชุญูู ุงููุฏูู)
  const endTurn = () => {
    nextTurn();
  };

  // ุฅุนุงุฏุฉ ุชุดุบูู ุงููุนุจุฉ
  const restartGame = () => {
    setGamePhase('setup');
    setPlayers([]);
    setCurrentPlayerIndex(0);
    setTurnOrder([]);
    setRound(1);
    setCountries({});
    setCurrentQuestion(null);
    setActionType(null);
    setSelectedCountry(null);
    setTargetCountry(null);
    setShowDifficultyModal(false);
    setPendingAction(null);
  };

  // ุฅุญุตุงุฆูุงุช ุงููุงุนุจ
  const getPlayerStats = (player) => {
    const playerCountries = Object.values(countries).filter(c => c.owner === player.id);
    return {
      countries: playerCountries.length,
      totalTroops: player.totalTroops || 0
    };
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 to-slate-800">
      {gamePhase === 'setup' && (
        <PlayerSetup onSetupComplete={setupPlayers} />
      )}
      
      {gamePhase === 'spin' && (
        <SpinWheel players={players} onSpinComplete={spinForTurnOrder} />
      )}
      
      {gamePhase === 'playing' && (
        <>
          <GameUI 
            players={players}
            currentPlayer={currentPlayer}
            round={round}
            countries={countries}
            onEndTurn={endTurn}
            onRestart={restartGame}
            getPlayerStats={getPlayerStats}
          />
          <WorldMapD3 
            countries={countries}
            onCountryClick={selectCountry}
            currentPlayer={currentPlayer}
            actionType={actionType}
          />
        </>
      )}

      {gamePhase === 'finished' && (
        <div className="min-h-screen bg-gradient-to-br from-purple-900 to-blue-900 flex items-center justify-center p-4">
          <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-8 text-center">
            <h1 className="text-4xl md:text-6xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-yellow-400 to-orange-500 mb-8">
              ๐ ุงูุชูุช ุงููุนุจุฉ!
            </h1>
            <p className="text-2xl text-white mb-8">
              ุงููุงุฆุฒ: {players.find(p => !p.eliminated)?.name || 'ูุง ููุฌุฏ'}
            </p>
            <button
              onClick={restartGame}
              className="bg-gradient-to-r from-green-500 to-emerald-500 text-white px-8 py-4 rounded-xl font-bold text-xl hover:scale-105 transition-transform"
            >
              ๐ ูุนุจุฉ ุฌุฏูุฏุฉ
            </button>
          </div>
        </div>
      )}

      {/* Modal ุงูุณุคุงู */}
      {currentQuestion && (
        <QuestionModal 
          question={currentQuestion}
          onAnswer={answerQuestion}
          onClose={() => setCurrentQuestion(null)}
        />
      )}

      {/* Modal ุงุฎุชูุงุฑ ุงูุตุนูุจุฉ */}
      <DifficultySelectionModal />
    </div>
  );
}